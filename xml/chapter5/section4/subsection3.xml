<SUBSECTION>
  <NAME>
    Conditionals, Assignments, and <SPLITINLINE><SCHEME>Definitions</SCHEME><JAVASCRIPT>Declarations and Blocks</JAVASCRIPT></SPLITINLINE>
  </NAME>

  <LABEL NAME="sec:cond-assign-def-evaluation"/>
  <TEXT>
    <INDEX>explicit-control evaluator for Scheme
    <SUBINDEX>conditionals</SUBINDEX></INDEX>
    As with the metacircular evaluator, special forms are handled by
    selectively evaluating fragments of the expression.  For
    <SPLITINLINE>
      <SCHEME>
	an <SCHEMEINLINE>if</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	conditional
      </JAVASCRIPT>
    </SPLITINLINE>
    expression, we must evaluate the predicate and decide, based on the
    value of predicate, whether to evaluate the consequent or the
    alternative.
  </TEXT>

  <TEXT>
    Before evaluating the predicate, we save the
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>if</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	conditional
      </JAVASCRIPT>
    </SPLITINLINE>
    expression itself so that we can later extract the consequent or
    alternative.  We also save the environment, which we will need later in
    order to evaluate the consequent or the alternative, and we save
    <SCHEMEINLINE>continue</SCHEMEINLINE>, which we will need later in order to
    return to the evaluation of the expression that is waiting for the value of
    the
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>if</SCHEMEINLINE>.
      </SCHEME>
      <JAVASCRIPT>
	conditional.
      </JAVASCRIPT>
    </SPLITINLINE>
    <SNIPPET EVAL="no">
      <SCHEME>
<!--  \indcode*{ev-if} -->
ev-if
(save exp)                    <EM>; save expression for later</EM>
(save env)
(save continue)
(assign continue (label ev-if-decide))
(assign exp (op if-predicate) (reg exp))
(goto (label eval-dispatch))  <EM>; evaluate the predicate</EM>
      </SCHEME>
      <JAVASCRIPT>
<!--  \indcode*{ev-if} -->
"ev_cond",
      save("stmt"), // save expression for later
      save("env"),
      save("continue"),
      assign("continue", label("ev_cond_decide")),
      assign("stmt", list(op("conditional_pred"), reg("stmt"))),
      go_to(label("eval_dispatch")), // evaluate the predicate
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    When we return from evaluating the predicate, we test whether it was
    true or false and, depending on the result, place either the
    consequent or the alternative in
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>exp</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>stmt</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    before
    going to
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>eval-dispatch</SCHEMEINLINE>.</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>eval_dispatch</JAVASCRIPTINLINE>.
      </JAVASCRIPT>
    </SPLITINLINE>
    Notice that restoring <SCHEMEINLINE>env</SCHEMEINLINE> and
    <SCHEMEINLINE>continue</SCHEMEINLINE> here sets up
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>eval-dispatch</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>eval_dispatch</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    to have the correct environment and
    to continue at the right place to receive the value of the
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>if</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	conditional
      </JAVASCRIPT>
    </SPLITINLINE>
    expression. 
    <SNIPPET EVAL="no">
      <SCHEME>
ev-if-decide
(restore continue)
(restore env)
(restore exp)
(test (op true?) (reg val))
(branch (label ev-if-consequent))
ev-if-alternative
(assign exp (op if-alternative) (reg exp))
(goto (label eval-dispatch))
ev-if-consequent
(assign exp (op if-consequent) (reg exp))
(goto (label eval-dispatch))
      </SCHEME>
      <JAVASCRIPT>
"ev_cond_decide",
      restore("continue"),
      restore("env"),
      restore("stmt"),
      test(list(op("is_true"), reg("val"))),
      branch(label("ev_cond_consequent")),
      
"ev_cond_alternative",
      assign("stmt", list(op("conditional_alt"), reg("stmt"))),
      go_to(label("eval_dispatch")),
      
"ev_cond_consequent",
      assign("stmt", list(op("conditional_cons"), reg("stmt"))),
      go_to(label("eval_dispatch")),
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <SUBHEADING> 
    <NAME>Assignments and <SPLITINLINE><SCHEME>definitions</SCHEME><JAVASCRIPT>declarations</JAVASCRIPT></SPLITINLINE></NAME>
  </SUBHEADING>

  <TEXT>
    <INDEX>explicit-control evaluator
    <SUBINDEX>assignments</SUBINDEX></INDEX>
    Assignments are handled by
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>ev-assignment</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>ev_assignment</JAVASCRIPTINLINE>,
      </JAVASCRIPT>
    </SPLITINLINE>
    which is reached from
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>eval-dispatch</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>eval_dispatch</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    with the assignment expression in <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>exp</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>stmt</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>.  The
    code at
    <SPLITINLINE>
      <SCHEME>
      <SCHEMEINLINE>ev-assignment</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>ev_assignment</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    first evaluates the value part of the expression and then installs the new
    value in the environment.
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>Set-variable-value!</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>
	The function
	<JAVASCRIPTINLINE>assign_symbol_value</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    is assumed to be available as a machine operation.
    <SNIPPET EVAL="no">
      <SCHEME>
      <!--  \indcode*{ev-assignment} -->
ev-assignment
(assign unev (op assignment-variable) (reg exp))
(save unev)                   <EM>; save variable for later</EM>
(assign exp (op assignment-value) (reg exp))
(save env)
(save continue)
(assign continue (label ev-assignment-1))
(goto (label eval-dispatch))  <EM>; evaluate the assignment value</EM>
ev-assignment-1
(restore continue)
(restore env)
(restore unev)
(perform
(op set-variable-value!) (reg unev) (reg val) (reg env))
(assign val (const ok))
(goto (reg continue))
      </SCHEME>
      <JAVASCRIPT>
<!--  \indcode*{ev-assignment} -->
"ev_assignment",
      assign("unev", list(op("assignment_symbol"), reg("stmt"))),
      save("unev"), // save variable for later
      assign("stmt", list(op("assignment_value"), reg("stmt"))),
      save("env"),
      save("continue"),
      assign("continue", label("ev_assignment_1")),
      go_to(label("eval_dispatch")), // evaluate assignment value
      
"ev_assignment_1",
      restore("continue"),
      restore("env"),
      restore("unev"),
      perform(list(op("assign_symbol_value"),
                   reg("unev"), reg("val"), reg("env"))),
      go_to(reg("continue")),
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    <INDEX>explicit-control evaluator
    <SUBINDEX>definitions</SUBINDEX></INDEX>
    <SPLITINLINE><SCHEME>Definitions</SCHEME><JAVASCRIPT>Declarations of variables and constants</JAVASCRIPT></SPLITINLINE> are handled in a similar way:
    <SNIPPET EVAL="no">
      <SCHEME>
<!--  \indcode*{ev-definition} -->
ev-definition
(assign unev (op definition-variable) (reg exp))
(save unev)                   <EM>; save variable for later</EM>
(assign exp (op definition-value) (reg exp))
(save env)
(save continue)
(assign continue (label ev-definition-1))
(goto (label eval-dispatch))  <EM>; evaluate the definition value</EM>
ev-definition-1
(restore continue)
(restore env)
(restore unev)
(perform
(op define-variable!) (reg unev) (reg val) (reg env))
(assign val (const ok))
(goto (reg continue))
      </SCHEME>
      <JAVASCRIPT>
<!--  \indcode*{ev_variable_declaration} -->
"ev_variable_declaration",
      assign("unev", list(op("variable_declaration_symbol"),
                          reg("stmt"))),
      save("unev"), // save variable for later
      assign("stmt", list(op("variable_declaration_value"),
                          reg("stmt"))),
      save("env"),
      save("continue"),
      assign("continue", label("ev_declaration")),
      go_to(label("eval_dispatch")), // evaluate declaration value
      
<!--  \indcode*{ev_declaration} -->
"ev_declaration",
      restore("continue"),
      restore("env"),
      restore("unev"),
      perform(list(op("assign_symbol_value"),
                   reg("unev"), reg("val"), reg("env"))),
      assign("val", constant(undefined)),
      go_to(reg("continue")),
      
<!--  \indcode*{ev_constant_declaration} -->
"ev_constant_declaration",
      assign("unev", list(op("constant_declaration_symbol"),
                          reg("stmt"))),
      save("unev"), // save constant for later
      assign("stmt", list(op("constant_declaration_value"),
                          reg("stmt"))),
      save("env"),
      save("continue"),
      assign("continue", label("ev_declaration")),
      go_to(label("eval_dispatch")), // evaluate declaration value
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    <SPLIT>
      <JAVASCRIPT>
        <INDEX>explicit-control evaluator <SUBINDEX>definitions</SUBINDEX></INDEX>

        Evaluation of blocks evaluates the body of the block with
        respect to the current environment extended by a binding
        of all local names to the special value
        <JAVASCRIPTINLINE>no_value_yet</JAVASCRIPTINLINE>.
      
    <SNIPPET EVAL="no">
      <JAVASCRIPT>
"ev_block",
      assign("stmt", list(op("block_body"), reg("stmt"))),
      assign("val", list(op("scan_out_declarations"), reg("stmt"))),

      save("stmt"), // temporarily store to stmt
      assign("stmt", list(op("list_of_unassigned"), reg("val"))),
      assign("env", list(op("extend_environment"), 
                         reg("val"), 
                         reg("stmt"), 
                         reg("env"))),
      restore("stmt"),
      go_to(label("eval_dispatch")),
      </JAVASCRIPT>
    </SNIPPET>
      </JAVASCRIPT>
    </SPLIT>

    The function <JAVASCRIPTINLINE>get_temp_block_values</JAVASCRIPTINLINE> can
    be implemented easily using a map:
    <JAVASCRIPTINLINE>(locals) => map((_) => no_value_yet, locals)</JAVASCRIPTINLINE>.
  </TEXT>
  
  <EXERCISE>
    <LABEL NAME="ex:derived-expressions"/>
    <INDEX>derived expressions in evaluator
    <SUBINDEX>adding to explicit-control evaluator</SUBINDEX></INDEX>
    <SPLIT>
      <SCHEME>
	<INDEX>explicit-control evaluator for Scheme
	<SUBINDEX>derived expressions</SUBINDEX></INDEX>
	<INDEX>explicit-control evaluator for Scheme
	<SUBINDEX>special forms (additional)</SUBINDEX></INDEX>
	Extend the evaluator to handle derived expressions such as
	<SCHEMEINLINE>cond</SCHEMEINLINE>,
	<SCHEMEINLINE>let</SCHEMEINLINE>, and so on
	(section<SPACE/><REF NAME="sec:representing-expressions"/>).
	You may <QUOTE>cheat</QUOTE> and assume that the syntax
	transformers such as <SCHEMEINLINE>cond-&gt;if</SCHEMEINLINE> are available
	as machine operations.<FOOTNOTE>This isn<APOS/>t really cheating.  In an
	actual implementation built from scratch, we would use our explicit-control
	evaluator to interpret a Scheme program that performs source-level
	transformations
	<SPLITINLINE>
	  <SCHEME><SCHEMEINLINE>like cond-&gt;if</SCHEMEINLINE></SCHEME>
	  <JAVASCRIPT><JAVASCRIPTINLINE></JAVASCRIPTINLINE></JAVASCRIPT>
	  </SPLITINLINE> in a syntax phase that runs before execution.</FOOTNOTE>
      </SCHEME>
      <JAVASCRIPT>
	Extend the evaluator to handle <JAVASCRIPTINLINE>while</JAVASCRIPTINLINE>
	loops, by translating them to applications of a function
	<JAVASCRIPTINLINE>while_loop</JAVASCRIPTINLINE>, as shown in
	exercise<SPACE/><REF NAME="ex:while_loop"/>.
	You can then paste the declaration of the function
	<JAVASCRIPTINLINE>while_loop</JAVASCRIPTINLINE> in front of user programs.
	You may <QUOTE>cheat</QUOTE> and assume that the syntax transformer
	<JAVASCRIPTINLINE>while_to_application</JAVASCRIPTINLINE> is available
	as machine operation.<FOOTNOTE>This isn<APOS/>t really cheating.  In an
	actual implementation built from scratch, we would use our explicit-control
	evaluator to interpret a JavaScript program that performs source-level
	transformations like
	<JAVASCRIPTINLINE>while_to_application</JAVASCRIPTINLINE>
	in a syntax phase that runs before execution.</FOOTNOTE> Refer to
	exercise<SPACE/><REF NAME="ex:while_loop"/> to discuss whether
	this approach works if return, break and continue statements are allowed
	inside the <JAVASCRIPTINLINE>while</JAVASCRIPTINLINE> loop. If not,
	how can you modify the explicit control evaluator to run programs
	with <JAVASCRIPTINLINE>while</JAVASCRIPTINLINE> loops that include
	these statements?
      </JAVASCRIPT>
    </SPLIT>
  </EXERCISE>

  <EXERCISE>
    <INDEX>explicit-control evaluator for Scheme
    <SUBINDEX>special forms (additional)</SUBINDEX></INDEX>
    <SPLIT>
      <SCHEME>
	Implement
	<SCHEMEINLINE>cond</SCHEMEINLINE>
	as a new basic special form
	without reducing it to
	<SCHEMEINLINE>if</SCHEMEINLINE>. 
      </SCHEME>
      <JAVASCRIPT>
	Implement conditional statements in the explicit control evaluator.
      </JAVASCRIPT>
    </SPLIT>
    <SPLITINLINE>
      <SCHEME>
        You will have to construct a loop that tests the
        predicates of successive <SCHEMEINLINE>cond</SCHEMEINLINE>
        clauses until you find one that is true, and then use
        <SCHEMEINLINE>ev-sequence</SCHEMEINLINE>
        to evaluate the actions of the clause.
      </SCHEME>
      <JAVASCRIPT>
        Note that proper handling of returns inside the consequent
        and alternative blocks poses a challenge as the
        current implementation only supports returning from the
        outermost block in a function. One way to implement this
        is to add a new register
        <JAVASCRIPTINLINE>returning</JAVASCRIPTINLINE> that keeps
        track of whether the current function is returning. Change
        <JAVASCRIPTINLINE>ev_sequence</JAVASCRIPTINLINE> so that
        instead of checking if the next statement is a return
        statement, the sequence loop inspects
        <JAVASCRIPTINLINE>returning</JAVASCRIPTINLINE> to
        determine whether to continue or return. Also note that it
        is possible to nest several conditional statements, so a
        <JAVASCRIPTINLINE>return</JAVASCRIPTINLINE> can appear at
        any depth.
      </JAVASCRIPT>
	  </SPLITINLINE>
    <LABEL NAME="ex:eceval-cond"/>
  </EXERCISE>

  <EXERCISE>
    <INDEX>explicit-control evaluator for Scheme
    <SUBINDEX>normal-order evaluation</SUBINDEX></INDEX>
    <INDEX>normal-order evaluation
    <SUBINDEX>explicit@in explicit-control evaluator</SUBINDEX></INDEX>
    Modify the evaluator so that it uses normal-order evaluation,
    based on the lazy evaluator of
    section<SPACE/><REF NAME="sec:lazy-evaluation"/>.
  </EXERCISE>
</SUBSECTION>

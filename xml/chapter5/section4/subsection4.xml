<SUBSECTION>
  <NAME>
    Running the Evaluator
  </NAME>

  <LABEL NAME="sec:running-evaluator"/>
  <INDEX>explicit-control evaluator for Scheme
  <SUBINDEX>running|(</SUBINDEX></INDEX>
  <TEXT>
    <INDEX>models of evaluation</INDEX>
    <INDEX>evaluation<SUBINDEX>models of</SUBINDEX></INDEX>
    With the implementation of the explicit-control evaluator we come to
    the end of a development, begun in chapter<SPACE/>1, in which we have
    explored successively more precise models of the evaluation process.
    We started with the relatively informal substitution model, then
    extended this in chapter<SPACE/>3 to the environment model, which enabled us
    to deal with state and change.  In the metacircular evaluator of
    chapter<SPACE/>4, we used <SPLITINLINE><SCHEME>Scheme</SCHEME><JAVASCRIPT>JavaScript</JAVASCRIPT></SPLITINLINE>
    itself as a language for making more
    explicit the environment structure constructed during evaluation of an
    expression.  Now, with register machines, we have taken a close look
    at the evaluator<APOS/>s mechanisms for storage management,
    argument passing, and control.  At
    each new level of description, we have had to raise issues and resolve
    ambiguities that were not apparent at the previous, less precise
    treatment of evaluation.  To understand the behavior of the
    explicit-control evaluator, we can simulate it and monitor its
    performance.
  </TEXT>

  <TEXT>
    <INDEX>explicit-control evaluator for Scheme
    <SUBINDEX>driver loop</SUBINDEX></INDEX>
    <INDEX>driver loop
    <SUBINDEX>explicit@in explicit-control evaluator</SUBINDEX></INDEX>
    We will install a driver loop in our evaluator machine.  This plays
    the role of the
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>driver-loop</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>driver_loop</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    of section<SPACE/><REF NAME="sec:running-eval"/> and similarly extends
    the current program environment in each iteration of the loop.  The evaluator
    will repeatedly print a prompt, read 
    <SPLITINLINE>
      <SCHEME>an expression, </SCHEME>
      <JAVASCRIPT>a program, scan its declarations and appropriately extend the environment
      before proceeding to </JAVASCRIPT>
    </SPLITINLINE>
    evaluate
    <SPLITINLINE>
      <SCHEME>the expression</SCHEME>
      <JAVASCRIPT>the program</JAVASCRIPT>
    </SPLITINLINE>
    by going to
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>eval-dispatch</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>eval_dispatch</JAVASCRIPTINLINE>,
    </JAVASCRIPT></SPLITINLINE>
    and print the result.
    The following instructions form the beginning of the
    explicit-control evaluator<APOS/>s controller sequence:<FOOTNOTE>We assume
    here that
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>read</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>prompt_for_input</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    and the various printing
    operations are available as primitive machine operations, which is useful
    for our simulation, but completely unrealistic in practice.  These are
    actually extremely complex operations.  In practice, they would be
    implemented using low-level input-output operations such as transferring
    single characters to and from a device.
    <P/>
    To support the
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>get-global-environment</SCHEMEINLINE> operation
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>get_program_environment</JAVASCRIPTINLINE> and
	<JAVASCRIPTINLINE>set_program_environment</JAVASCRIPTINLINE> operations
      </JAVASCRIPT>
    </SPLITINLINE>
    we define
    <!--  \indcode*{the-global-environment} -->
    <!--  \indcode*{get-global-environment} -->
    <SNIPPET EVAL="no">
      <NAME>the_global</NAME>
      <SCHEME>
    (define the-global-environment (setup-environment))

    (define (get-global-environment)
    the-global-environment)
      </SCHEME>
      <JAVASCRIPT>
function get_program_environment() {
    return the_global_environment;
}
function set_program_environment(env) {
    the_global_environment = env;
}
      </JAVASCRIPT>
    </SNIPPET></FOOTNOTE>
    <INDEX>prompts<SUBINDEX>explicit-control evaluator</SUBINDEX></INDEX>
    <!--  \indcode*{read-eval-print-loop} -->
    <!--  \indcode*{print-result} -->
    <SNIPPET EVAL="no">
      <SCHEME>
      read-eval-print-loop
      (perform (op initialize-stack))
      (perform
      (op prompt-for-input) (const ";;; EC-Eval input:"))
      (assign exp (op read))
      (assign env (op get-global-environment))
      (assign continue (label print-result))
      (goto (label eval-dispatch))
      print-result
      (perform
      (op announce-output) (const ";;; EC-Eval value:"))
      (perform (op user-print) (reg val))
      (goto (label read-eval-print-loop))
      </SCHEME>
      <JAVASCRIPT>
"read_eval_print_loop",
  perform(list(op("initialize_stack"))),
  assign("stmt", list(op("prompt_for_input"),
                      constant("EC-evaluate input:"))),
  assign("env", list(op("get_program_environment"))),
  assign("val", list(op("scan_out_declarations"), reg("stmt"))),
  save("stmt"), // temporarily store to stmt
  assign("stmt", list(op("list_of_unassigned"), reg("val"))),
  assign("env", list(op("extend_environment"), 
                     reg("val"), reg("stmt"), reg("env"))),
  perform(list(op("set_program_environment"), reg("env"))),
  restore("stmt"),
  assign("continue", label("print_result")),
  go_to(label("eval_dispatch")),

"print_result",
  perform(list(op("user_print"),
               constant("EC-evaluate value:"), reg("val"))),
  go_to(label("read_eval_print_loop")), 
  </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    <INDEX>error handling
    <SUBINDEX>in explicit-control evaluator</SUBINDEX></INDEX>
    <INDEX>explicit-control evaluator for Scheme
    <SUBINDEX>error handling</SUBINDEX></INDEX>
    When we encounter an error in a
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    (such as the <QUOTE>unknown
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    type error</QUOTE> indicated at
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>apply-dispatch</SCHEMEINLINE>),</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>apply_dispatch</JAVASCRIPTINLINE>),
      </JAVASCRIPT>
    </SPLITINLINE>
    we print an error message and return to the driver loop.<FOOTNOTE>There are
    other errors that we would like the interpreter to handle, but these are not
    so simple.  See exercise<SPACE/><REF NAME="ex:interp-errors"/>.</FOOTNOTE>
    <!--  \indcode*{unknown-expression-type} -->
    <!--  \indcode*{unknown-procedure-type} -->
    <!--  \indcode*{signal-error} -->
    <SNIPPET EVAL="no">
      <SCHEME>
      unknown-expression-type
      (assign val (const unknown-expression-type-error))
      (goto (label signal-error))

      unknown-procedure-type
      (restore continue)    <EM>; clean up stack (from <SCHEMEINLINE>apply-dispatch</SCHEMEINLINE>)</EM>
      (assign val (const unknown-procedure-type-error))
      (goto (label signal-error))

      signal-error
      (perform (op user-print) (reg val))
      (goto (label read-eval-print-loop))
      </SCHEME>
      <JAVASCRIPT>
"unknown_expression_type",
      assign("val", constant("unknown_expression_type_error")),
      go_to(label("signal_error")),
      
"unknown_function_type",
      restore("continue"), /// clean up stack (from apply_dispatch)
      assign("val", constant("unknown_function_type_error")),
      go_to(label("signal_error")),
      
"signal_error",
      perform(list(op("user_print"),
                   constant("EC_eval error:"), reg("val"))),
      go_to(label("read_eval_print_loop")),
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    For the purposes of the simulation, we initialize the stack each time
    through the driver loop, since it might not be empty after an error
    <SPLITINLINE>
      <SCHEME>
	(such as an undefined variable)
      </SCHEME>
      <JAVASCRIPT>
	(such as an undeclared name)
      </JAVASCRIPT>
    </SPLITINLINE>
    interrupts an evaluation.<FOOTNOTE>We
    could perform the stack initialization only after errors, but doing it in
    the driver loop will be convenient for monitoring the evaluator<APOS/>s
    performance, as described below.</FOOTNOTE>
    <INDEX>explicit-control evaluator for Scheme
    <SUBINDEX>controller|)</SUBINDEX></INDEX>
  </TEXT>

  <TEXT>
    <INDEX>explicit-control evaluator for Scheme
    <SUBINDEX>machine model</SUBINDEX></INDEX>
    If we combine all the code fragments presented in sections
    <REF NAME="sec:eceval-core"/><ENDASH/><REF NAME="sec:running-evaluator"/>,
    we can create an evaluator machine model that we can run using the
    register-machine simulator of section<SPACE/><REF NAME="sec:simulator"/>.

    <SNIPPET EVAL="no" LATEX="yes">
      <SCHEME>
      (define eceval
      (make-machine
      '(exp env val proc argl continue unev)
      eceval-operations
      '(
      read-eval-print-loop
      ^entire machine controller as given above^
      )))
      </SCHEME>
      <JAVASCRIPT>
const eceval = 
    make_machine(list("stmt", "env", "val", "fun",
                      "argl", "continue", "unev"),
                 eceval_operations,
                 list("read_eval_print_loop",
                      $\langle entire$ $machine$ $controller$ $as$ $given$ $above \rangle$
                     ));
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>eceval</NAME>
      <REQUIRES>functions_4_1_1</REQUIRES>
      <REQUIRES>functions_4_1_2</REQUIRES>
      <REQUIRES>functions_4_1_3</REQUIRES>
      <REQUIRES>functions_4_1_4</REQUIRES>
      <REQUIRES>user_print</REQUIRES>
      <REQUIRES>the_global</REQUIRES>
      <REQUIRES>make_machine</REQUIRES>
      <REQUIRES>start</REQUIRES>
      <REQUIRES>eceval_operations</REQUIRES>
      <REQUIRES>eceval_controller</REQUIRES>
      <JAVASCRIPT>
const eceval =
    make_machine(list("stmt", "env", "val", "fun",
                      "argl", "continue", "unev"),
                 eceval_operations,
                 eceval_controller);
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>eceval_controller</NAME>
      <JAVASCRIPT>
const eceval_controller =	
    list(
      "read_eval_print_loop",
      perform(list(op("initialize_stack"))),
      assign("stmt", list(op("prompt_for_input"),
                          constant("EC-evaluate input:"))),
      assign("env", list(op("get_program_environment"))),
      assign("val", list(op("scan_out_declarations"), reg("stmt"))),
      save("stmt"), // temporarily store to stmt
      assign("stmt", list(op("list_of_unassigned"), reg("val"))),
      assign("env", list(op("extend_environment"), 
                         reg("val"), reg("stmt"), reg("env"))),
      perform(list(op("set_program_environment"), reg("env"))),
      restore("stmt"),
      assign("continue", label("print_result")),
      go_to(label("eval_dispatch")),

      "print_result",
      perform(list(op("user_print"),
                   constant("EC-evaluate value:"), reg("val"))),
      // to avoid infinite REPL
      go_to(label("evaluator_done")),
      //go_to(label("read_eval_print_loop")), 

      "eval_dispatch",
      test(list(op("is_self_evaluating"),
                reg("stmt"))),
      branch(label("ev_self_eval")),
      test(list(op("is_name"), reg("stmt"))),
      branch(label("ev_name")),
      // Treat let/const the same
      test(list(op("is_variable_declaration"),
                reg("stmt"))),
      branch(label("ev_variable_declaration")),
      test(list(op("is_constant_declaration"),
                reg("stmt"))),
      branch(label("ev_constant_declaration")),
      test(list(op("is_assignment"), reg("stmt"))),
      branch(label("ev_assignment")),
      test(list(op("is_return_statement"),
                reg("stmt"))),
      branch(label("ev_return")),
      test(list(op("is_conditional_expression"),
                reg("stmt"))),
      branch(label("ev_cond")),
      test(list(op("is_lambda_expression"),
                reg("stmt"))),
      branch(label("ev_lambda")),
      test(list(op("is_sequence"), reg("stmt"))),
      branch(label("ev_seq")),
      test(list(op("is_block"), reg("stmt"))),
      branch(label("ev_block")),
      test(list(op("is_application"), reg("stmt"))),
      branch(label("ev_application")),
      go_to(label("unknown_expression_type")),

      "ev_return_from_seq",
      restore("continue"),

      "ev_return",
      assign("stmt", list(op("return_expression"), reg("stmt"))),
      go_to(label("eval_dispatch")),
        
      "ev_self_eval",
      assign("val", reg("stmt")),
      go_to(reg("continue")),
      
      "ev_name",
      assign("val",
        list(op("lookup_symbol_value"), reg("stmt"), reg("env"))),
      go_to(reg("continue")),
      
      "ev_lambda",
      assign("unev", list(op("lambda_parameters"), reg("stmt"))),
      assign("stmt", list(op("lambda_body"), reg("stmt"))),
      assign("val", list(op("make_function"),
                         reg("unev"), reg("stmt"), reg("env"))),
      go_to(reg("continue")),
      
      "ev_application",
      save("continue"),
      save("env"),
      assign("unev", list(op("args"), reg("stmt"))),
      save("unev"),
      assign("stmt", list(op("function_expression"), reg("stmt"))),
      assign("continue", label("ev_appl_did_function_expression")),
      go_to(label("eval_dispatch")),
      
      "ev_appl_did_function_expression",
      restore("unev"), // the args
      restore("env"),
      assign("argl", list(op("empty_arglist"))),
      assign("fun", reg("val")), // the function_expression
      test(list(op("has_no_argument_expressions"),
                reg("unev"))),
      branch(label("apply_dispatch")),
      save("fun"),
      
      "ev_appl_argument_expression_loop",
      save("argl"),
      assign("stmt", list(op("first_arg"), reg("unev"))),
      test(list(op("is_last_argument_expression"),
                reg("unev"))),
      branch(label("ev_appl_last_arg")),
      save("env"),
      save("unev"),
      assign("continue", label("ev_appl_accumulate_arg")),
      go_to(label("eval_dispatch")),
      
      "ev_appl_accumulate_arg",
      restore("unev"),
      restore("env"),
      restore("argl"),
      assign("argl", list(op("adjoin_arg"),
                          reg("val"), reg("argl"))),
      assign("unev", list(op("rest_args"), reg("unev"))),
      go_to(label("ev_appl_argument_expression_loop")),
      
      "ev_appl_last_arg",
      assign("continue", label("ev_appl_accum_last_arg")),
      go_to(label("eval_dispatch")),
      
      "ev_appl_accum_last_arg",
      restore("argl"),
      assign("argl", list(op("adjoin_arg"),
                          reg("val"), reg("argl"))),
      restore("fun"),
      go_to(label("apply_dispatch")),
      
      "apply_dispatch",
      test(list(op("is_primitive_function"),
                reg("fun"))),
      branch(label("primitive_apply")),
      test(list(op("is_compound_function"),
                reg("fun"))),
      branch(label("compound_apply")),
      go_to(label("unknown_function_type")),

      "primitive_apply",
      assign("val", list(op("apply_primitive_function"), 
                         reg("fun"), 
                         reg("argl"))),
      restore("continue"),
      go_to(reg("continue")),
      
      "compound_apply",
      assign("unev", list(op("function_parameters"), reg("fun"))),
      assign("env", list(op("function_environment"), reg("fun"))),
      assign("env", list(op("extend_environment"), 
                         reg("unev"), reg("argl"), reg("env"))),
      assign("stmt", list(op("function_body"), reg("fun"))),

      test(list(op("does_not_handle_return"), reg("stmt"))),
      branch(label("no_return_wrapping")),
      restore("continue"),
      go_to(label("eval_dispatch")),

      "no_return_wrapping",
      assign("continue", label("end_without_return")),
      go_to(label("eval_dispatch")),
   
      "ev_seq",
      save("continue"),
      assign("unev", list(op("sequence_statements"), reg("stmt"))),

      "ev_sequence",
      assign("stmt", list(op("first_statement"), reg("unev"))),
      test(list(op("is_return_statement"), reg("stmt"))),
      branch(label("ev_return_from_seq")),
      test(list(op("is_last_statement"), reg("unev"))),
      branch(label("ev_sequence_last_exp")),
      save("unev"),
      save("env"),
      assign("continue", label("ev_sequence_continue")),
      go_to(label("eval_dispatch")),
      
      "ev_sequence_continue",
      restore("env"),
      restore("unev"),
      assign("unev", list(op("rest_statements"), reg("unev"))),
      go_to(label("ev_sequence")),
      
      "ev_sequence_last_exp",
      assign("continue", label("end_without_return")),
      go_to(label("eval_dispatch")),

      "end_without_return",
      assign("val", constant(undefined)),
      restore("continue"),
      go_to(reg("continue")),
        
      "ev_block",
      assign("stmt", list(op("block_body"), reg("stmt"))),
      assign("val", list(op("scan_out_declarations"), reg("stmt"))),

      save("stmt"), // temporarily store to stmt
      assign("stmt", list(op("list_of_unassigned"), reg("val"))),
      assign("env", list(op("extend_environment"), 
                         reg("val"), 
                         reg("stmt"), 
                         reg("env"))),
      restore("stmt"),
      go_to(label("eval_dispatch")),
      
      "ev_cond",
      save("stmt"), // save expression for later
      save("env"),
      save("continue"),
      assign("continue", label("ev_cond_decide")),
      assign("stmt", list(op("conditional_pred"), reg("stmt"))),
      go_to(label("eval_dispatch")), // evaluate the predicate
      
      "ev_cond_decide",
      restore("continue"),
      restore("env"),
      restore("stmt"),
      test(list(op("is_true"), reg("val"))),
      branch(label("ev_cond_consequent")),
      
      "ev_cond_alternative",
      assign("stmt", list(op("conditional_alt"), reg("stmt"))),
      go_to(label("eval_dispatch")),
      
      "ev_cond_consequent",
      assign("stmt", list(op("conditional_cons"), reg("stmt"))),
      go_to(label("eval_dispatch")),
      
      "ev_assignment",
      assign("unev", list(op("assignment_symbol"), reg("stmt"))),
      save("unev"), // save variable for later
      assign("stmt", list(op("assignment_value"), reg("stmt"))),
      save("env"),
      save("continue"),
      assign("continue", label("ev_assignment_1")),
      go_to(label("eval_dispatch")), // evaluate assignment value
      
      "ev_assignment_1",
      restore("continue"),
      restore("env"),
      restore("unev"),
      perform(list(op("assign_symbol_value"),
                   reg("unev"), reg("val"), reg("env"))),
      go_to(reg("continue")),
      
      "ev_variable_declaration",
      assign("unev", list(op("variable_declaration_symbol"),
                          reg("stmt"))),
      save("unev"), // save variable for later
      assign("stmt", list(op("variable_declaration_value"),
                          reg("stmt"))),
      save("env"),
      save("continue"),
      assign("continue", label("ev_declaration")),
      go_to(label("eval_dispatch")), // evaluate declaration value
      
      "ev_declaration",
      restore("continue"),
      restore("env"),
      restore("unev"),
      perform(list(op("assign_symbol_value"),
                   reg("unev"), reg("val"), reg("env"))),
      assign("val", constant(undefined)),
      go_to(reg("continue")),
      
      "ev_constant_declaration",
      assign("unev", list(op("constant_declaration_symbol"),
                          reg("stmt"))),
      save("unev"), // save constant for later
      assign("stmt", list(op("constant_declaration_value"),
                          reg("stmt"))),
      save("env"),
      save("continue"),
      assign("continue", label("ev_declaration")),
      go_to(label("eval_dispatch")), // evaluate declaration value
      
      // Error handling
      "unknown_expression_type",
      assign("val", constant("unknown_expression_type_error")),
      go_to(label("signal_error")),
      
      "unknown_function_type",
      restore("continue"), /// clean up stack (from apply_dispatch)
      assign("val", constant("unknown_function_type_error")),
      go_to(label("signal_error")),
      
      "signal_error",
      perform(list(op("user_print"),
                   constant("EC_eval error:"), reg("val"))),
      go_to(label("read_eval_print_loop")),
      
      "evaluator_done"
     );
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    We must define 
    <SPLITINLINE>
      <SCHEME>Scheme procedures</SCHEME>
      <JAVASCRIPT>JavaScript functions</JAVASCRIPT>
    </SPLITINLINE>
    to simulate the operations used as primitives by the evaluator.  These are
    the same
    <SPLITINLINE>
      <SCHEME>procedures</SCHEME>
      <JAVASCRIPT>functions</JAVASCRIPT>
    </SPLITINLINE>
    we used for the metacircular evaluator in
    section<SPACE/><REF NAME="sec:mc-eval"/>, together with the few additional
    ones defined in footnotes throughout section<SPACE/><REF NAME="sec:eceval"/>.
    <SNIPPET EVAL="no" LATEX="yes">
      <SCHEME>
(define eceval-operations
  (list (list 'self-evaluating? self-evaluating)
        <EM><LATEXINLINE>$\langle$</LATEXINLINE>complete list of operations for eceval machine<LATEXINLINE>$\rangle$</LATEXINLINE></EM>))
      </SCHEME>
      <JAVASCRIPT>
const eceval_operations = 
    list(list("is_self_evaluating", is_self_evaluating),
         $\langle complete$ $list$ $of$ $operations$ $for$ $eceval$ $machine\rangle$);
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET HIDE="yes">
      <NAME>eceval_operations</NAME>
      <JAVASCRIPT>
const eceval_operations = 
    list(
      // args
      list("args"                , args),
      list("function_expression" , function_expression),
      list("has_no_argument_expressions"     , no_args),
      list("first_arg"           , first_arg),
      list(
        "is_last_argument_expression",
        (a) => is_null(tail(a))
      ),
      list("rest_args", rest_args),

      //arg
      list(
        "empty_arglist",
        (_) => list()
      ),
      list(
        "adjoin_arg",
        (val, argl) => append(argl, list(val))
      ),

      // stmt (sequence)
      list("first_statement"     , first_statement),
      list("rest_statements"     , rest_statements),
      list("is_last_statement"   , is_last_statement),
      list("sequence_statements" , sequence_statements),

      // eval functions from meta-circular evaluator
      list("is_self_evaluating"  , is_self_evaluating),
      list("is_name"             , is_name),
      list("symbol_of_name"      , symbol_of_name),
      list(
        "all_names_of_names",
        (names) => map(symbol_of_name, names)
      ),
      list("is_assignment"           , is_assignment),
      list("assignment_symbol"       , assignment_symbol),
      list("assignment_value"        , assignment_value),
      list("assign_symbol_value"     , assign_symbol_value),
      list("is_constant_declaration" , is_constant_declaration),
      list(
        "constant_declaration_symbol",
        constant_declaration_symbol
      ),
      list(
        "constant_declaration_value",
        constant_declaration_value
      ),
      list("is_variable_declaration", is_variable_declaration),
      list(
        "variable_declaration_symbol",
        variable_declaration_symbol
      ),
      list(
        "variable_declaration_value",
        variable_declaration_value
      ),
      list("assign_symbol_value"  , assign_symbol_value),
      list("is_lambda_expression" , is_lambda_expression),
      list(
        "lambda_parameters",
        lambda_parameters
      ),
      list("lambda_body"         , lambda_body),
      list("is_return_statement" , is_return_statement),
      list("return_expression"   , return_expression),
      list(
        "is_conditional_expression",
        is_conditional_expression
      ),
      list("conditional_pred" , cond_expr_pred),
      list("conditional_cons" , cond_expr_cons),
      list("conditional_alt"  , cond_expr_alt),

      list("is_sequence"      , is_sequence),
      list("make_sequence"    , make_sequence),
      list("is_block"         , is_block),
      list("block_body"       , block_body),
      list("scan_out_declarations"    , scan_out_declarations),
      list("does_not_handle_return", s => !(is_block(s) || is_sequence(s) || is_return_statement(s))),
      list("list_of_unassigned"       , list_of_unassigned),
      list("is_application"           , is_application),
      list("is_primitive_function"    , is_primitive_function),
      list("apply_primitive_function" , apply_primitive_function),
      list("is_compound_function"     , is_compound_function),
      list("function_parameters"      , function_parameters),
      list("function_environment"     , function_environment),
      list("function_body"            , function_body),
      list("extend_environment"       , extend_environment),
      list("make_function"            , make_function),

      list(
        "lookup_symbol_value",
        (stmt, env) => lookup_symbol_value(symbol_of_name(stmt), env)
      ),
      list("get_global_environment", get_global_environment),
      list("set_global_environment", set_global_environment),

      // generic helpers
      list("is_true", is_true),
      list("is_null", is_null),
      list("is_pair", is_pair),
      list("is_number", is_number),
      list("append", append),
      list("pair", pair),

      list("prompt_for_input", (s) => prompt_for_input(s)),
      list("user_print", user_print),
      list("display", display),
      // list("make_compiled_function", make_compiled_function),
      // list("compiled_function_env", compiled_function_env),
      list("list", list)
    );
    </JAVASCRIPT>
  </SNIPPET>
  </TEXT>

  
  <TEXT>
    Finally, we can initialize the global environment and run the evaluator:
    <SNIPPET>
      <NAME>ec_eval_all</NAME>
      <REQUIRES>eceval</REQUIRES>
      <SCHEME>
      (define the-global-environment (setup-environment))

      (start eceval)
      </SCHEME>
      <SCHEMEOUTPUT>
;;; EC-Eval input:
(define (append x y)
(if (null? x)
y
(cons (car x)
    (append (cdr x) y))))
;;; EC-Eval value:
ok

;;; EC-Eval input:
(append '(a b c) '(d e f))
;;; EC-Eval value:
(a b c d e f)
      </SCHEMEOUTPUT>
      <JAVASCRIPT_RUN>
const test_program_1 = "                       \
function test1() {                             \
    display('A', 1);                           \
    const result = test2();                    \
    return display(result, 3);                 \
    display('I should not be printed', 7);     \
}                                              \
function test2() {                             \
    display('B', 2);                           \
    return 'C';                                \
    display('I should not be printed', 4);     \
}                                              \
function test3() {                             \
    display('Hello from test3');               \
}                                              \
function test4() {                             \
    return display('Hello from test4');        \
}                                              \
display(test1(), 5);                           \
display(test3(), 6); // Should print undefined \
display(test4(), 8);                           \
";

const test_program_2 = "           \
function adder(a, b) {             \
    return                         \
        a === 0                    \
      ? b                          \
      : adder(a - 1, b + 1);       \
 42;                               \
}                                  \
display(adder(7, 5), \"7 + 5 =\"); \
";

function prompt_for_input(p) {
    return make_block(parse(prompt(p)));
    // To avoid having to paste programs:
    //  return make_block(parse(test_program_1));
    //  return make_block(parse(test_program_2));
}

start(eceval);
get_register_contents(eceval, "val");
</JAVASCRIPT_RUN>
      <JAVASCRIPT>
const the_global_environment = setup_environment();
start(eceval);
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
EC-evaluate input:
function plus(a, b) {
    return a === 0 ? b : plus(a - 1, b + 1);
}
EC-evaluate value:
ok

EC-evaluate input:
plus(2, 40);
EC-evaluate value:
42
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    Of course, evaluating expressions in this way will take much longer
    than if we had directly typed them into <SPLITINLINE><SCHEME>Scheme</SCHEME><JAVASCRIPT>JavaScript</JAVASCRIPT></SPLITINLINE>, because of the
    multiple levels of simulation involved.  Our expressions are evaluated
    by the explicit-control-evaluator machine, which is being simulated by
    a <SPLITINLINE><SCHEME>Scheme</SCHEME><JAVASCRIPT>JavaScript</JAVASCRIPT></SPLITINLINE> program, which is itself being evaluated by the
    <SPLITINLINE><SCHEME>Scheme</SCHEME><JAVASCRIPT>JavaScript</JAVASCRIPT></SPLITINLINE>
    interpreter.
    <INDEX>explicit-control evaluator for Scheme
    <SUBINDEX>running|)</SUBINDEX></INDEX>
  </TEXT>

  <SUBHEADING> 
    <NAME>Monitoring the performance of the evaluator</NAME>
  </SUBHEADING>

  <INDEX>explicit-control evaluator for Scheme
  <SUBINDEX>monitoring performance (stack use)|(</SUBINDEX></INDEX>
  <TEXT>
    <INDEX>simulation<SUBINDEX>machine@as machine-design tool</SUBINDEX></INDEX>
    Simulation can be a powerful tool to guide the implementation of
    evaluators.  Simulations make it easy not only to explore variations
    of the register-machine design but also to monitor the performance of
    the simulated evaluator.  For example, one important factor in
    performance is how efficiently the evaluator uses the stack.  We can
    observe the number of stack operations required to evaluate various
    expressions by defining the evaluator register machine with the
    version of the simulator that collects statistics on stack use
    (section<SPACE/><REF NAME="sec:monitor"/>), and adding an instruction at the
    evaluator<APOS/>s
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>print-result</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>print_result</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    entry point to print the statistics:
    <!--  \indcode*{print-result}[monitored-stack version] -->
    <!--  \indcode*{print-result}[monitored-stack version] -->
    <SNIPPET LATEX="yes">
      <SCHEME EVAL="no">
      print-result
      (perform (op print-stack-statistics))<EM>; added instruction</EM>
      (perform
      (op announce-output) (const "EC-Eval value:"))
      ^$\ldots$^ ; same as before
      </SCHEME>
      <JAVASCRIPT>
"print_result",
    perform(op("print_stack_statistics")), // added instruction
    perform(op("announce_output"), constant("EC-evaluate value:")),
    $\ldots$  // same as before
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    Interactions with the evaluator now look like this:
    <SNIPPET EVAL="no">
      <SCHEMEOUTPUT>
;;; EC-Eval input:
(define (factorial n)
(if (= n 1)
1
(* (factorial (- n 1)) n)))
(total-pushes = 3 maximum-depth = 3)
;;; EC-Eval value:
ok

;;; EC-Eval input:
(factorial 5)
(total-pushes = 144 maximum-depth = 28)
;;; EC-Eval value:
120
      </SCHEMEOUTPUT>
      <JAVASCRIPT_OUTPUT>
EC-evaluate input:
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
    <SNIPPET EVAL="no">
      <JAVASCRIPT>
function factorial (n) {
    return n === 1
        ? 1
        : n * factorial(n - 1); 
}
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
(total-pushes = 3 maximum-depth = 3)
EC-evaluate value:
undefined

EC-evaluate input:
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
    <SNIPPET EVAL="no">
      <JAVASCRIPT>      
factorial(5);
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
(total-pushes = 144 maximum-depth = 28)
EC-evaluate value:
120
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    Note that the driver loop of the evaluator reinitializes the stack
    at the start of
    each interaction, so that the statistics printed will refer only to
    stack operations used to evaluate the previous expression.
  </TEXT>

  <EXERCISE>
    <LABEL NAME="ex:tail-rec-fact"/>
    <INDEX>explicit-control evaluator for Scheme
    <SUBINDEX>tail recursion</SUBINDEX></INDEX>
    <INDEX>tail recursion
    <SUBINDEX>explicit-control evaluator and</SUBINDEX></INDEX>
    <!--  \indcode{factorial}[stack usage, interpreted] -->
    Use the monitored stack to explore the tail-recursive property of the
    evaluator (section<SPACE/><REF NAME="sec:sequence-evaluation"/>).  Start the
    evaluator and define the iterative <SCHEMEINLINE>factorial</SCHEMEINLINE>
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
    <JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
    from section<SPACE/><REF NAME="sec:recursion-and-iteration"/>:
    <SNIPPET EVAL="no">
      <SCHEME>
      (define (factorial n)
      (define (iter product counter)
      (if (&gt; counter n)
            product
            (iter (* counter product)
            (+ counter 1))))
      (iter 1 1))
      </SCHEME>
      <JAVASCRIPT>
function factorial(n) {
    function iter(product, counter, max_count) {
        return counter &gt; max_count
               ? product
               : fact_iter(counter * product,
                           counter + 1,
                           max_count);
    }

    return iter(1, 1, n);
}
      </JAVASCRIPT>
    </SNIPPET>
    Run the
    <SPLITINLINE><SCHEME>procedure</SCHEME>
    <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    with some small values of <LATEXINLINE>$n$</LATEXINLINE>.  Record the
    maximum stack depth and the number of pushes required to compute
    <LATEXINLINE>$n!$</LATEXINLINE> for each of these values.
    <OL>
      <LI>
	You will find that the maximum depth required to evaluate
	<LATEXINLINE>$n!$</LATEXINLINE> is independent of
	<LATEXINLINE>$n$</LATEXINLINE>.  What is that depth?
      </LI>
      <LI>
	Determine from your data a formula in terms of
	<LATEXINLINE>$n$</LATEXINLINE> for the total number of push operations
	used in evaluating <LATEXINLINE>$n!$</LATEXINLINE> for any
	<LATEXINLINE>$n \geq 1$</LATEXINLINE>. Note that the number of
	operations used is a linear function of <LATEXINLINE>$n$</LATEXINLINE>
	and is thus determined by two constants.
      </LI>
    </OL>
  </EXERCISE>

  <EXERCISE>
    <!--  \indcode{factorial}[stack usage, interpreted] -->
    For comparison with exercise<SPACE/><REF NAME="ex:tail-rec-fact"/>, explore
    the behavior of the following
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    for computing factorials recursively:
    <SNIPPET EVAL="no">
      <SCHEME>
      (define (factorial n)
      (if (= n 1)
      1
      (* (factorial (- n 1)) n)))
      </SCHEME>
      <JAVASCRIPT>
function factorial(n) {
    return n === 1 
           ? 1
           : n * factorial(n - 1);
}
      </JAVASCRIPT>
    </SNIPPET>
    By running this
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    with the monitored stack, determine, as a function of
    <LATEXINLINE>$n$</LATEXINLINE>, the maximum depth of the stack and the total
    number of pushes used in evaluating <LATEXINLINE>$n!$</LATEXINLINE> for
    <LATEXINLINE>$n \geq 1$</LATEXINLINE>.  (Again, these functions will be
    linear.)  Summarize your experiments by filling in the following table with
    the appropriate expressions in terms of <LATEXINLINE>$n$</LATEXINLINE>:
    <FIGURE src="img_original/527table.svg"></FIGURE>
    The maximum depth is a measure of the amount of space used by the
    evaluator in carrying out the computation, and the number of pushes
    correlates well with the time required.
    <LABEL NAME="ex:rec-fact"/>
  </EXERCISE>
      
  <EXERCISE>
    <LABEL NAME="ex:rec-fib"/>
    <INDEX>explicit-control evaluator for Scheme
    <SUBINDEX>tail recursion</SUBINDEX></INDEX>
    <INDEX>tail recursion
    <SUBINDEX>explicit-control evaluator and</SUBINDEX></INDEX>
    Modify the definition of the evaluator by changing
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>eval-sequence</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>eval_sequence</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    as described in section<SPACE/><REF NAME="sec:sequence-evaluation"/> so that
    the evaluator is no longer tail-recursive.  Rerun your experiments from
    exercises<SPACE/><REF NAME="ex:tail-rec-fact"/>
    and<SPACE/><REF NAME="ex:rec-fact"/> to demonstrate that both versions of
    the <SCHEMEINLINE>factorial</SCHEMEINLINE>
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    now require space that grows linearly with their input.
  </EXERCISE>

  <EXERCISE>
    <!--  \indcode{fib}[stack usage, interpreted] -->
    Monitor the stack operations in the tree-recursive Fibonacci computation:
    <SNIPPET EVAL="no">
      <SCHEME>
      <!--  \indcode*{fib}[tree-recursive version] -->
      (define (fib n)
      (if (&lt; n 2)
      n
      (+ (fib (- n 1)) (fib (- n 2)))))
      </SCHEME>
      <JAVASCRIPT>
<!--  \indcode*{fib}[tree-recursive version] -->
function fib(n) {
    return n &lt; 2 ? n : fib(n - 1) + fib(n - 2);
}
      </JAVASCRIPT>
    </SNIPPET>
    <OL>
      <LI>
	Give a formula in terms of <LATEXINLINE>$n$</LATEXINLINE> for the
	maximum depth of the stack required to compute
	<LATEXINLINE>${\textrm{Fib}}(n)$</LATEXINLINE> for
	<LATEXINLINE>$n \geq 2$</LATEXINLINE>.  Hint: In
	section<SPACE/><REF NAME="sec:tree-recursion"/> we argued that the space
	used by this process grows linearly with <LATEXINLINE>$n$</LATEXINLINE>.
      </LI>
      <LI>
	Give a formula for the total number of pushes used to compute
	<LATEXINLINE>${\textrm{Fib}}(n)$</LATEXINLINE> for
	<LATEXINLINE>$n \geq 2$</LATEXINLINE>.  You should find that the number
	of pushes (which correlates well with the time used) grows exponentially
	with <LATEXINLINE>$n$</LATEXINLINE>.  Hint: Let
	<LATEXINLINE>$S(n)$</LATEXINLINE> be the number of pushes used in
	computing <LATEXINLINE>${\textrm{Fib}}(n)$</LATEXINLINE>.  You should be
	able to argue that there is a formula that expresses
	<LATEXINLINE>$S(n)$</LATEXINLINE> in terms of
	<LATEXINLINE>$S(n-1)$</LATEXINLINE>, <LATEXINLINE>$S(n-2)$</LATEXINLINE>,
	and some fixed <QUOTE>overhead</QUOTE> constant
	<LATEXINLINE>$k$</LATEXINLINE> that is independent of
	<LATEXINLINE>$n$</LATEXINLINE>.  Give the formula, and say what
	<LATEXINLINE>$k$</LATEXINLINE> is.  Then show that
	<LATEXINLINE>$S(n)$</LATEXINLINE> can be expressed as
	<LATEXINLINE>$a {\textrm{Fib}}(n+1) + b$</LATEXINLINE> and give the
	values of <LATEXINLINE>$a$</LATEXINLINE> and
	<LATEXINLINE>$b$</LATEXINLINE>.
      </LI>
    </OL>
  </EXERCISE>
  <INDEX>explicit-control evaluator for Scheme
  <SUBINDEX>monitoring performance (stack use)|)</SUBINDEX></INDEX>

  <EXERCISE>
    <LABEL NAME="ex:interp-errors"/>
    <INDEX>error handling
    <SUBINDEX>in explicit-control evaluator</SUBINDEX></INDEX>
    <INDEX>explicit-control evaluator for Scheme
    <SUBINDEX>error handling</SUBINDEX></INDEX>
    Our evaluator currently catches and signals only two kinds of
    errors<EMDASH/>unknown expression types and unknown
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    types.  Other errors will take us out of the evaluator read-eval-print loop.
    When we run the evaluator using the register-machine simulator, these
    errors are caught by the underlying <SPLITINLINE><SCHEME>Scheme</SCHEME><JAVASCRIPT>JavaScript</JAVASCRIPT></SPLITINLINE> system.  This is analogous
    to the computer crashing when a user program makes an
    <SPLITINLINE>
      <SCHEME>
        <FOOTNOTE>Regrettably, this is the normal state of affairs in
    <INDEX>C<SUBINDEX>error handling</SUBINDEX></INDEX>
    conventional compiler-based language systems such as C.  
    <INDEX>UNIX</INDEX>
    <INDEX>DOS/Windows</INDEX>
    <INDEX>Macintosh</INDEX>
    In UNIX<LATEXINLINE>$^{\textrm{TM}}$</LATEXINLINE> the system <QUOTE>dumps
    core,</QUOTE> and in DOS/Windows<LATEXINLINE>$^{\textrm{TM}}$</LATEXINLINE>
    it becomes catatonic. The
    Macintosh<LATEXINLINE>$^{\textrm{TM}}$</LATEXINLINE> displays a picture of
    an exploding bomb and offers you the opportunity to reboot the
    computer<EMDASH/>if you<APOS/>re lucky.</FOOTNOTE>
      </SCHEME>
      <JAVASCRIPT>
        <FOOTNOTE>This manifests itself as, for example, a
        <QUOTE>kernel panic</QUOTE> or a <QUOTE>blue screen of
        death</QUOTE> or a spurious reboot, typically on phones
        and tablets. Most modern operating systems do a decent job
        of preventing user programs from causing an entire machine
        to crash.</FOOTNOTE>
      </JAVASCRIPT>
    </SPLITINLINE>
    error.  It is a large project to
    make a real error system work, but it is well worth the effort to understand
    what is involved here.
    <OL>
      <LI>
	Errors that occur in the evaluation process, such as an attempt to
	access an unbound
	<SPLITINLINE>
	  <SCHEME>variable,</SCHEME>
	  <JAVASCRIPT>name,</JAVASCRIPT>
	</SPLITINLINE>
	could be caught by changing the lookup
	operation to make it return a distinguished condition code, which cannot
	be a possible value of any user
	<SPLITINLINE>
	  <SCHEME>variable.</SCHEME>
	  <JAVASCRIPT>name.</JAVASCRIPT>
	</SPLITINLINE>
	The evaluator can test
	for this condition code and then do what is necessary to go to
	<SPLITINLINE>
	  <SCHEME><SCHEMEINLINE>signal-error</SCHEMEINLINE>.</SCHEME>
	  <JAVASCRIPT><JAVASCRIPTINLINE>signal_error</JAVASCRIPTINLINE>.
	  </JAVASCRIPT>
	</SPLITINLINE>
	Find all of the places in the evaluator where such a
	change is necessary and fix them.  This is lots of work.
      </LI>
      <LI>
	Much worse is the problem of handling errors that are signaled by
	applying primitive
	<SPLITINLINE>
	  <SCHEME>procedures</SCHEME>
	  <JAVASCRIPT>functions</JAVASCRIPT>
	</SPLITINLINE>
	such as an attempt to divide by zero or an attempt to extract the
	<SPLITINLINE>
	  <SCHEME><SCHEMEINLINE>car</SCHEMEINLINE></SCHEME>
	  <JAVASCRIPT><JAVASCRIPTINLINE>head</JAVASCRIPTINLINE></JAVASCRIPT>
	</SPLITINLINE>
	of a symbol.  In a professionally written high-quality system, each
	primitive application is checked for safety as part of the primitive.
	For example, every call to
	<SPLITINLINE>
	  <SCHEME><SCHEMEINLINE>car</SCHEMEINLINE></SCHEME>
	  <JAVASCRIPT><JAVASCRIPTINLINE>head</JAVASCRIPTINLINE></JAVASCRIPT>
	</SPLITINLINE>
	could first check that the argument is a pair.  If the argument is not
	a pair, the application would return a distinguished condition code to
	the evaluator, which would then report the failure.  We could arrange
	for this in our register-machine simulator by making each primitive
	<SPLITINLINE>
	  <SCHEME>procedure</SCHEME>
	  <JAVASCRIPT>function</JAVASCRIPT>
	</SPLITINLINE>
	check for applicability and returning an appropriate distinguished
	condition code on failure. Then the
	<SPLITINLINE>
	  <SCHEME><SCHEMEINLINE>primitive-apply</SCHEMEINLINE></SCHEME>
	  <JAVASCRIPT><JAVASCRIPTINLINE>primitive_apply</JAVASCRIPTINLINE>
	  </JAVASCRIPT>
	</SPLITINLINE>
	code in the evaluator can check for the condition code and go to
	<SPLITINLINE>
	  <SCHEME><SCHEMEINLINE>signal-error</SCHEMEINLINE></SCHEME>
	  <JAVASCRIPT><JAVASCRIPTINLINE>signal_error</JAVASCRIPTINLINE>
	  </JAVASCRIPT>
	</SPLITINLINE>
	if necessary.  Build this structure and make it work.
	This is a major project.
      </LI>
    </OL>
  </EXERCISE>
  <INDEX>explicit-control evaluator for Scheme|)</INDEX>
</SUBSECTION>

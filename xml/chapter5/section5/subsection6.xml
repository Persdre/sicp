<SUBSECTION>
  <NAME>
    Lexical Addressing
  </NAME>

  <LABEL NAME="sec:lexical-addressing"/>
  <INDEX>compiler for Scheme<SUBINDEX>lexical addressing|(</SUBINDEX></INDEX>
  <INDEX>lexical addressing|(</INDEX>
  <TEXT>
    One of the most common optimizations performed by compilers is the
    optimization of
    <SPLITINLINE>
      <SCHEME>variable</SCHEME>
      <JAVASCRIPT>name</JAVASCRIPT>
    </SPLITINLINE>
    lookup.  Our compiler, as we have implemented
    it so far, generates code that uses the
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>lookup-variable-value</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>lookup_symbol_value</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    operation of the evaluator machine.  This searches for a
    <SPLITINLINE>
      <SCHEME>variable</SCHEME>
      <JAVASCRIPT>name</JAVASCRIPT>
    </SPLITINLINE>
    by comparing it with each
    <SPLITINLINE>
      <SCHEME>variable</SCHEME>
      <JAVASCRIPT>name</JAVASCRIPT>
    </SPLITINLINE>
    that is currently bound, working frame
    by frame outward through the run-time environment.  This search can be
    expensive if the frames are deeply nested or if there are many
    <SPLITINLINE>
      <SCHEME>variables.</SCHEME>
      <JAVASCRIPT>names.</JAVASCRIPT>
    </SPLITINLINE>
    For example, consider the problem of looking up the value
    of <SCHEMEINLINE>x</SCHEMEINLINE> while evaluating the expression
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(* x y z)</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>x * y * z</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    in an application of the
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    that is returned by
    <SNIPPET>
      <SCHEME>
      (let ((x 3) (y 4))
      (lambda (a b c d e)
      (let ((y (* a b x))
            (z (+ c d x)))
      (* x y z))))
      </SCHEME>
      <JAVASCRIPT>
((x, y) =>
    ((a, b, c, d, e) =>
        ((y, z) => x * y * z)(a * b * x, c + d + x)))(3, 4)
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    <SPLIT>
      <SCHEME>
	Since a <SCHEMEINLINE>let</SCHEMEINLINE> expression is just syntactic
	sugar for a
	<SPLITINLINE>
	  <SCHEME><SCHEMEINLINE>lambda</SCHEMEINLINE></SCHEME>
	  <JAVASCRIPT>
	    <JAVASCRIPTINLINE>function declaration expression</JAVASCRIPTINLINE>
	  </JAVASCRIPT>
	</SPLITINLINE>
	combination, this expression is equivalent to
	<SNIPPET>
	  <SCHEME>
      ((lambda (x y)
      (lambda (a b c d e)
      ((lambda (y z) (* x y z))
      (* a b x)
      (+ c d x))))
      3
      4)
	  </SCHEME>
	  <JAVASCRIPT>
((x, y) =>
    ((a, b, c, d, e) =>
        ((y, z) => x * y * z)(a * b * x, c + d + x)))(3, 4)
	  </JAVASCRIPT>
	</SNIPPET>
      </SCHEME>
    </SPLIT>
    <SPLIT>
      <SCHEME>
	Each time
	<SCHEMEINLINE>lookup-variable-value</SCHEMEINLINE>
	searches for <SCHEMEINLINE>x</SCHEMEINLINE>, it must determine that
	the symbol <SCHEMEINLINE>x</SCHEMEINLINE> is not
	<SCHEMEINLINE>eq?</SCHEMEINLINE> to
	<SCHEMEINLINE>y</SCHEMEINLINE> or
	<SCHEMEINLINE>z</SCHEMEINLINE> (in the first frame), nor to
	<SCHEMEINLINE>a</SCHEMEINLINE>, <SCHEMEINLINE>b</SCHEMEINLINE>,
	<SCHEMEINLINE>c</SCHEMEINLINE>, <SCHEMEINLINE>d</SCHEMEINLINE>, or
	<SCHEMEINLINE>e</SCHEMEINLINE> (in the second frame).
      </SCHEME>
      <JAVASCRIPT>
	Each time
	<JAVASCRIPTINLINE>lookup_symbol_value</JAVASCRIPTINLINE>
	searches for <JAVASCRIPTINLINE>x</JAVASCRIPTINLINE>, it must determine
	that the string
	<JAVASCRIPTINLINE>"x"</JAVASCRIPTINLINE> is not
	<JAVASCRIPTINLINE>===</JAVASCRIPTINLINE> to
	<JAVASCRIPTINLINE>"y"</JAVASCRIPTINLINE> or
	<JAVASCRIPTINLINE>"z"</JAVASCRIPTINLINE> (in the first frame), nor to
	<JAVASCRIPTINLINE>"a"</JAVASCRIPTINLINE>,
	<JAVASCRIPTINLINE>"b"</JAVASCRIPTINLINE>,
	<JAVASCRIPTINLINE>"c"</JAVASCRIPTINLINE>,
	<JAVASCRIPTINLINE>"d"</JAVASCRIPTINLINE>, or
	<JAVASCRIPTINLINE>"e"</JAVASCRIPTINLINE> (in the second frame).
      </JAVASCRIPT>
    </SPLIT>
    <SPLIT>
      <SCHEME>
    We will assume, for the moment, that our programs do not use
    <SCHEMEINLINE>define</SCHEMEINLINE><EMDASH/>that variables are bound only
    with <SCHEMEINLINE>lambda</SCHEMEINLINE>.
      </SCHEME>
    </SPLIT>
    Because our language is 
    <INDEX>lexical scoping<SUBINDEX>environment structure and</SUBINDEX></INDEX>
    lexically scoped, the run-time environment for any expression will have a
    structure that parallels the lexical structure of the program in which
    the expression appears.<SPLITINLINE><SCHEME><FOOTNOTE>This is not true if
    we allow internal definitions, unless we scan them out.
    See exercise<SPACE/><REF NAME="ex:lexical-address-end"/>.
  </FOOTNOTE></SCHEME></SPLITINLINE>
  Thus, the compiler can know, when it analyzes the
  above expression, that each time the
  <SPLITINLINE>
    <SCHEME>procedure</SCHEME>
    <JAVASCRIPT>function</JAVASCRIPT>
  </SPLITINLINE>
  is applied the
  <SPLITINLINE>
    <SCHEME>variable</SCHEME>
    <JAVASCRIPT>name</JAVASCRIPT>
  </SPLITINLINE>
  <SCHEMEINLINE>x</SCHEMEINLINE> in
  <SPLITINLINE>
    <SCHEME><SCHEMEINLINE>(* x y z)</SCHEMEINLINE></SCHEME>
    <JAVASCRIPT><JAVASCRIPTINLINE>x * y * z</JAVASCRIPTINLINE></JAVASCRIPT>
  </SPLITINLINE>
  will be found two frames out from the
  current frame and will be the first
  <SPLITINLINE>
    <SCHEME>variable</SCHEME>
    <JAVASCRIPT>name</JAVASCRIPT>
  </SPLITINLINE>
  in that frame.
  </TEXT>

  <TEXT>
    <INDEX>lexical addressing<SUBINDEX>lexical address</SUBINDEX></INDEX>
    We can exploit this fact by inventing a new kind of
    <SPLITINLINE>
      <SCHEME>variable-lookup</SCHEME>
      <JAVASCRIPT>name-lookup</JAVASCRIPT>
    </SPLITINLINE>
    operation,
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>lexical-address-lookup</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>lexical_address_lookup</JAVASCRIPTINLINE>,
      </JAVASCRIPT>
    </SPLITINLINE>
    that takes as arguments an environment and a <EM>lexical address</EM> that
    consists of two numbers: a <EM>frame number</EM>, which specifies how many
    frames to pass over, and a <EM>displacement number</EM>, which specifies
    how many variables to pass over in that frame.  
    <!--  \indcode{lexical-address-lookup} -->
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>Lexical-address-lookup</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>
	The operation
	<JAVASCRIPTINLINE>lexical_address_lookup</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    will produce the value of the
    <SPLITINLINE>
      <SCHEME>variable</SCHEME>
      <JAVASCRIPT>name</JAVASCRIPT>
    </SPLITINLINE>
    stored at that lexical address
    relative to the current environment.  If we add the
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>lexical-address-lookup</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>lexical_address_lookup</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    operation to our machine, we can make the compiler generate code that
    references
    <SPLITINLINE>
      <SCHEME>variables</SCHEME>
      <JAVASCRIPT>names</JAVASCRIPT>
    </SPLITINLINE>
    using this operation, rather than
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>lookup-variable-value</SCHEMEINLINE>.</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>lookup_symbol_value</JAVASCRIPTINLINE>.
      </JAVASCRIPT>
    </SPLITINLINE>
    Similarly, our compiled code can use a new
    <!--  \indcode{lexical-address-set!} -->
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>lexical-address-set!</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>lexical_address_assign</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    operation instead of
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>set-variable-value!</SCHEMEINLINE>.</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>assign_symbol_value</JAVASCRIPTINLINE>.
      </JAVASCRIPT>
    </SPLITINLINE>
  </TEXT>

  <TEXT>
    In order to generate such code, the compiler must be able to determine
    the lexical address of a
    <SPLITINLINE>
      <SCHEME>variable</SCHEME>
      <JAVASCRIPT>name</JAVASCRIPT>
    </SPLITINLINE>
    it is about to compile a reference
    to.  The lexical address of a
    <SPLITINLINE>
      <SCHEME>variable</SCHEME>
      <JAVASCRIPT>name</JAVASCRIPT>
    </SPLITINLINE>
    in a program depends on where
    one is in the code.  For example, in the following program, the
    address of <SCHEMEINLINE>x</SCHEMEINLINE> in expression
    <LATEXINLINE>$e_1$</LATEXINLINE> is (2,0)<EMDASH/>two frames back
    and the first variable in the frame.  At that point
    <SCHEMEINLINE>y</SCHEMEINLINE> is at
    address (0,0) and <SCHEMEINLINE>c</SCHEMEINLINE> is at address (1,2).
    In expression
    <LATEXINLINE>$e_2$</LATEXINLINE>,
    <SCHEMEINLINE>x</SCHEMEINLINE> is at (1,0), 
    <SCHEMEINLINE>y</SCHEMEINLINE> is at (1,1), and
    <SCHEMEINLINE>c</SCHEMEINLINE> is at (0,2).
    <SNIPPET EVAL="no" LATEX="yes">
      <SCHEME>
      ((lambda (x y)
      (lambda (a b c d e)
      ((lambda (y z) ^e1^)
      ^e2^
      (+ c d x))))
      3
      4)
      </SCHEME>
      <JAVASCRIPT>
((x, y) =>
    ((a, b, c, d, e) =>
        ((y, z) => $e_1$)($e_2$, c + d + x)))(3, 4)
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    <INDEX>compile-time environment</INDEX>
    One way for the compiler to produce code that uses lexical addressing
    is to maintain a data structure called a <EM>compile-time
    environment</EM>.  This keeps track of which
    <SPLITINLINE>
      <SCHEME>variables</SCHEME>
      <JAVASCRIPT>names</JAVASCRIPT>
    </SPLITINLINE>
    will be at which
    positions in which frames in the run-time environment when a
    particular
    <SPLITINLINE>
      <SCHEME>variable-access</SCHEME>
      <JAVASCRIPT>name-access</JAVASCRIPT>
    </SPLITINLINE>
    operation is executed.  The compile-time
    environment is a list of frames, each containing a list of
    <SPLITINLINE>
      <SCHEME>variables.</SCHEME>
      <JAVASCRIPT>names.</JAVASCRIPT>
    </SPLITINLINE>
    (There will of course be no values bound to the
    <SPLITINLINE>
      <SCHEME>variables,</SCHEME>
      <JAVASCRIPT>names,</JAVASCRIPT>
    </SPLITINLINE>
    since values are not computed at compile time.)  The compile-time
    environment becomes an additional argument to
    <SCHEMEINLINE>compile</SCHEMEINLINE> and is
    passed along to each code generator.  The top-level call to
    <SCHEMEINLINE>compile</SCHEMEINLINE> uses an empty compile-time environment.
    When
    <SPLITINLINE>
      <SCHEME>
	a <SCHEMEINLINE>lambda</SCHEMEINLINE> body
      </SCHEME>
      <JAVASCRIPT>
	the body of a lambda expression
      </JAVASCRIPT>
    </SPLITINLINE>
    is compiled,
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>compile-lambda-body</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>compile_body</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    extends the compile-time environment by a frame containing the
    <SPLITINLINE>
      <SCHEME>
	procedure<APOS/>s 
      </SCHEME>
      <JAVASCRIPT>function<APOS/>s 
      </JAVASCRIPT>
    </SPLITINLINE>
    parameters, so that the
    <SPLITINLINE>
      <SCHEME>sequence</SCHEME>
      <JAVASCRIPT>statement</JAVASCRIPT>
    </SPLITINLINE>
    making up the body is compiled with that extended environment.
    <SPLIT>
      <JAVASCRIPT>
	Similarly when
	the body of a block
	is compiled,
	<JAVASCRIPTINLINE>compile_body</JAVASCRIPTINLINE>
	extends the compile-time environment by a frame containing the
	scanned-out local names of the body
	so that the body 
	is compiled with that extended environment.
      </JAVASCRIPT>
    </SPLIT>
    At each point in the compilation,
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>compile-variable</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>compile_name</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    and
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>compile-assignment</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>compile_assignment_returning</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    use the compile-time
    environment in order to generate the appropriate lexical addresses.
  </TEXT>

  <TEXT>
    <SPLIT>
      <SCHEME>
	Exercises<SPACE/><REF NAME="ex:lexical-address-start"/>
	through<SPACE/><REF NAME="ex:lexical-address-end"/> describe how to
	complete this sketch of the lexical-addressing strategy in order to
	incorporate lexical lookup into the compiler.
	Exercise<SPACE/><REF NAME="ex:cte-open-code"/> describes another use for the
	compile-time environment.
	<INDEX>compiler for Scheme<SUBINDEX>lexical addressing|)</SUBINDEX></INDEX>
	<INDEX>lexical addressing|)</INDEX>
      </SCHEME>
      <JAVASCRIPT>
	Exercises<SPACE/><REF NAME="ex:lexical-address-start"/>
	through<SPACE/><REF NAME="ex:impl-lex-addr"/> describe how to
	complete this sketch of the lexical-addressing strategy in order to
	incorporate lexical lookup into the compiler.
	Exercises<SPACE/><REF NAME="ex:lexical-constants"/>
	and<SPACE/><REF NAME="ex:cte-open-code"/>
	describe other uses for	the compile-time environment.
	<INDEX>compiler for Scheme<SUBINDEX>lexical addressing|)</SUBINDEX></INDEX>
	<INDEX>lexical addressing|)</INDEX>
      </JAVASCRIPT>
    </SPLIT>
  </TEXT>

  <EXERCISE>
    <!--  \indcode{lexical-address-lookup}\indcode{lexical-address-set!} -->
    Write a
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>lexical-address-lookup</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>lexical_address_lookup</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    that implements the new lookup operation.  It should take two
    arguments<EMDASH/>a lexical address and a run-time environment<EMDASH/>and
    return the value of the
    <SPLITINLINE>
      <SCHEME>variable</SCHEME>
      <JAVASCRIPT>symbol</JAVASCRIPT>
    </SPLITINLINE>
    stored at the specified lexical address.
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>Lexical-address-lookup</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>The function
      <JAVASCRIPTINLINE>lexical_address_lookup</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    should signal an error if the value of the
    <SPLITINLINE>
      <SCHEME>variable</SCHEME>
      <JAVASCRIPT>symbol</JAVASCRIPT>
    </SPLITINLINE>
    is the 
    <SPLITINLINE>
      <SCHEME>symbol <SCHEMEINLINE>*unassigned*</SCHEMEINLINE>.<FOOTNOTE>This
    is the modification to variable lookup
    <INDEX>scanning out internal definitions
    <SUBINDEX>compiler@in compiler</SUBINDEX></INDEX>
    <INDEX>compiler for Scheme
    <SUBINDEX>scanning out internal definitions</SUBINDEX></INDEX>
    required if we implement the scanning method to eliminate internal
    definitions (exercise<SPACE/><REF NAME="ex:lexical-address-end"/>).
    We will need to eliminate these definitions in order for lexical addressing
    to work.</FOOTNOTE>
      </SCHEME>
      <JAVASCRIPT>string <JAVASCRIPTINLINE>"*unassigned*"</JAVASCRIPTINLINE>.
      </JAVASCRIPT>
    </SPLITINLINE>
    <COMMENT>
      The footnote can be safely dropped, because the scanning
      method is the default in the JavaScript adaptation.
    </COMMENT>
    Also write a
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>lexical-address-set!</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>lexical_address_assign</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    that implements the operation that changes the value of the
    <SPLITINLINE>
      <SCHEME>variable</SCHEME>
      <JAVASCRIPT>symbol</JAVASCRIPT>
    </SPLITINLINE>
    at a specified lexical address.
    <LABEL NAME="ex:lexical-address-start"/>
    <LABEL NAME="ex:lexical-address-lookup"/>
  </EXERCISE>

  <EXERCISE>
    <INDEX>compile-time environment</INDEX>
    Modify the compiler to maintain the compile-time environment as
    described above.  That is, add a compile-time-environment argument to
    <SCHEMEINLINE>compile</SCHEMEINLINE> and the various code generators, and
    extend it in
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>compile-lambda-body</SCHEMEINLINE>.</SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>compile_lambda_body</JAVASCRIPTINLINE> and
	<JAVASCRIPTINLINE>compile_block</JAVASCRIPTINLINE>.
      </JAVASCRIPT>
      </SPLITINLINE>
  </EXERCISE>

  <EXERCISE>
    <LABEL NAME="ex:find-variable"/>
    <INDEX>compile-time environment</INDEX>
    Write a
    <SPLITINLINE>
      <SCHEME>procedure</SCHEME>
      <JAVASCRIPT>function</JAVASCRIPT>
    </SPLITINLINE>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>find-variable</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>find_symbol</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    that takes as arguments a
    <SPLITINLINE>
      <SCHEME>variable</SCHEME>
      <JAVASCRIPT>symbol</JAVASCRIPT>
    </SPLITINLINE>
    and a compile-time environment and
    returns the lexical address of the
    <SPLITINLINE>
      <SCHEME>variable</SCHEME>
      <JAVASCRIPT>symbol</JAVASCRIPT>
    </SPLITINLINE>
    with respect to that
    environment.  For example, in the program fragment that is shown above, the
    compile-time environment during the compilation of expression
    <LATEXINLINE>$e_1$</LATEXINLINE> is
    <SPLIT>
      <SCHEME><SCHEMEINLINE>((y z) (a b c d e) (x y))</SCHEMEINLINE>.
      </SCHEME>
      <JAVASCRIPT>
	<SNIPPET>
	  <JAVASCRIPT>
list(list("y", "z"), 
     list("a", "b", "c", "d", "e"), 
     list("x", "y"))
	  </JAVASCRIPT>
	</SNIPPET>
      </JAVASCRIPT>
    </SPLIT>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>Find-variable</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>The function <JAVASCRIPTINLINE>find_symbol</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    should produce
    <SNIPPET>
      <SCHEME>
      (find-variable 'c '((y z) (a b c d e) (x y)))
      </SCHEME>
      <SCHEMEOUTPUT>
      (1 2)
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
find_symbol("c", list(list("y", "z"), 
                      list("a", "b", "c", "d", "e"), 
                      list("x", "y")));
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
[1, [2, null]]
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>

    <SNIPPET>
      <SCHEME>
(find-variable 'x '((y z) (a b c d e) (x y)))
      </SCHEME>
      <SCHEMEOUTPUT>
      (2 0)
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
find_symbol("x", list(list("y", "z"), 
                      list("a", "b", "c", "d", "e"), 
                      list("x", "y")));
      </JAVASCRIPT>
      <JAVASCRIPT_OUTPUT>
[2, [0, null]]
      </JAVASCRIPT_OUTPUT>
    </SNIPPET>
    <SNIPPET>
      <SCHEME>
(find-variable 'w '((y z) (a b c d e) (x y)))
      </SCHEME>
      <SCHEMEOUTPUT>
not-found
      </SCHEMEOUTPUT>
      <JAVASCRIPT>
find_symbol("w", list(list("y", "z"), 
                      list("a", "b", "c", "d", "e"),
                      list("x", "y")));
      </JAVASCRIPT>
    <JAVASCRIPT_OUTPUT>
"not_found"
    </JAVASCRIPT_OUTPUT>
</SNIPPET>
  </EXERCISE>

  <EXERCISE>
    Using
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>find-variable</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>find_symbol</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    from exercise<SPACE/><REF NAME="ex:find-variable"/>,
    rewrite
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>compile-variable</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>compile_name</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    and
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>compile-assignment</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>compile_assignment_returning</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    to output lexical-address instructions.  
    <SPLIT>
      <SCHEME>
	In cases where <SCHEMEINLINE>find-variable</SCHEMEINLINE>
	returns <SCHEMEINLINE>not-found</SCHEMEINLINE>
	(that is, where the variable is not in the
	compile-time environment), you should have the code generators use the
	evaluator operations, as before, to search for the binding.	
	(The only place a variable that is not found at compile time can be is in
	the global environment, which is part of the run-time environment but
	is not part of the compile-time 
	environment.<FOOTNOTE>Lexical addresses cannot be used to access
	variables in the global environment, because these names can be defined
	and redefined interactively at any time.  With internal definitions
	scanned out, as
	in exercise<SPACE/><REF NAME="ex:lexical-address-end"/>,
	the only definitions the
	compiler sees are those at top level, which act on the global
	environment.  Compilation of a definition does not cause the defined
	name to be entered in the compile-time environment.</FOOTNOTE>
	Thus, if you wish, you may have the evaluator operations looks directly
	in the global environment, which can be obtained with the operation
	<SCHEMEINLINE>(op<SPACE/>get-global-environment)</SCHEMEINLINE>,
	instead of having them search the whole run-time
	environment found in <SCHEMEINLINE>env</SCHEMEINLINE>.)
	<COMMENT>
	  This is not possible in an interactive system that keeps
	  extending the program environment. Note the new
	  <JAVASCRIPTINLINE>driver_loop</JAVASCRIPTINLINE> in
	  <REF NAME="sec:running-eval"/> and the same idea recurring in
	  <JAVASCRIPTINLINE>compile_and_go</JAVASCRIPTINLINE> in
	  <REF NAME="sec:interfacing-compiled-code"/>.
	</COMMENT>
      </SCHEME>
      <JAVASCRIPT>
	In cases where <JAVASCRIPTINLINE>find_symbol</JAVASCRIPTINLINE>
	returns	<JAVASCRIPTINLINE>"not_found"</JAVASCRIPTINLINE>
	(that is, where the symbol is not in the compile-time environment),
	we can safely raise a compile-time error, because we use lexical
	scoping for all names.
      </JAVASCRIPT>
    </SPLIT>
    Test the modified compiler on a few simple cases, such as the nested
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>lambda</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>lambda</JAVASCRIPT>
    </SPLITINLINE>
    combination at the beginning of this section.
    <LABEL NAME="ex:impl-lex-addr"/>
  </EXERCISE>

  <SPLIT>
    <SCHEME>
      <EXERCISE>
	<LABEL NAME="ex:lexical-address-end"/>
	<INDEX>scanning out internal definitions
	<SUBINDEX>compiler@in compiler</SUBINDEX></INDEX>
	<INDEX>compiler for Scheme
	<SUBINDEX>scanning out internal definitions</SUBINDEX></INDEX>
	We argued in section<SPACE/><REF NAME="sec:internal-definitions"/> that
	internal definitions for block structure should not be considered
	<QUOTE>real</QUOTE> <SCHEMEINLINE>define</SCHEMEINLINE>s.  Rather, a
	<SPLITINLINE>
	  <SCHEME>procedure</SCHEME>
	  <JAVASCRIPT>function</JAVASCRIPT>
	</SPLITINLINE>
	body should be interpreted as if the internal variables being defined
	were installed as ordinary <SCHEMEINLINE>lambda</SCHEMEINLINE> variables
	initialized to their correct values using
	<SPLITINLINE>
	  <SCHEME><SCHEMEINLINE>set!</SCHEMEINLINE>.</SCHEME>
	  <JAVASCRIPT>assignment.</JAVASCRIPT>
	</SPLITINLINE>
	Section<SPACE/><REF NAME="sec:internal-definitions"/> and
	exercise<SPACE/><REF NAME="ex:internal-defs"/> showed how to modify the
	metacircular interpreter to accomplish this by scanning out internal
	definitions.  Modify the compiler to perform the same transformation
	before it compiles a
	<SPLITINLINE>
	  <SCHEME>procedure</SCHEME>
	  <JAVASCRIPT>function</JAVASCRIPT>
	</SPLITINLINE>
	body.
      </EXERCISE>
    </SCHEME>
    <JAVASCRIPT>
      <EXERCISE>
	<LABEL NAME="ex:lexical-constants"/>
	In JavaScript, any attempt to use assignment on a name that is declared
	as a constant leads to an error.
	Exercise<SPACE/><REF NAME="ex:mutable"/> shows how to
	detect such errors at runtime. With the techniques presented in this
	section, we can detect these errors <EM>at compile-time</EM> and make
	sure only programs are run in which no assignment to constants will
	ever occur. For this purpose, extend the function
	<JAVASCRIPTINLINE>compile_body</JAVASCRIPTINLINE> to collect the
	information whether a name is declared as a variable (using
	<JAVASCRIPTINLINE>let</JAVASCRIPTINLINE> or as a parameter), or as
	a constant (using <JAVASCRIPTINLINE>const</JAVASCRIPTINLINE>).
	Modify <JAVASCRIPTINLINE>compile_assignment</JAVASCRIPTINLINE>
	to generate an appropriate error when it detects an assignment to a
	constant.
      </EXERCISE>
    </JAVASCRIPT>
  </SPLIT>

  <EXERCISE>
    <SPLIT>
      <SCHEME>
	<LABEL NAME="ex:cte-open-code"/>
	<INDEX>compiler for Scheme
	<SUBINDEX>open coding of primitives</SUBINDEX></INDEX>
	<INDEX>open coding of primitives</INDEX>
	<INDEX>reserved words</INDEX>
	<INDEX>compile-time environment<SUBINDEX>open coding and</SUBINDEX></INDEX>
	In this section we have focused on the use of the compile-time
	environment to produce lexical addresses.  But there are other uses
	for compile-time environments.  For instance, in
	exercise<SPACE/><REF NAME="ex:open-code"/> we increased the efficiency of
	compiled code by open-coding primitive
	<SPLITINLINE>
	  <SCHEME>procedures.</SCHEME>
	  <JAVASCRIPT>functions.</JAVASCRIPT>
	</SPLITINLINE>
	Our implementation treated the names of open-coded
	<SPLITINLINE>
	  <SCHEME>procedures</SCHEME>
	  <JAVASCRIPT>functions</JAVASCRIPT>
	</SPLITINLINE>
	as reserved words.  If a program were to rebind such a name, the mechanism
	described in exercise<SPACE/><REF NAME="ex:open-code"/> would still
	open-code it as a primitive, ignoring the new binding.  For example,
	consider the
	<SPLITINLINE>
	  <SCHEME>procedure</SCHEME>
	  <JAVASCRIPT>function</JAVASCRIPT>
	</SPLITINLINE>
	<SNIPPET>
	  <SCHEME>
      (lambda (+ * a b x y)
      (+ (* a x) (* b y)))
	  </SCHEME>
	  <JAVASCRIPT>
(+ * a b x y) => (a * x) + (b * y)
	  </JAVASCRIPT>
	</SNIPPET>
	which computes a linear combination of <SCHEMEINLINE>x</SCHEMEINLINE> and
	<SCHEMEINLINE>y</SCHEMEINLINE>.  We might call it with arguments
	<SCHEMEINLINE>+matrix</SCHEMEINLINE>, <SCHEMEINLINE>*matrix</SCHEMEINLINE>,
	and four matrices, but the open-coding compiler would still open-code the
	<SCHEMEINLINE>+</SCHEMEINLINE> and the <SCHEMEINLINE>*</SCHEMEINLINE> in
	<SPLITINLINE>
	  <SCHEME>
	  <SCHEMEINLINE>(+ (* a x) (* b y))</SCHEMEINLINE></SCHEME>
	  <JAVASCRIPT>
	    <JAVASCRIPTINLINE>(a * x) + (b * y)</JAVASCRIPTINLINE>
	  </JAVASCRIPT>
	</SPLITINLINE>
	as primitive <SCHEMEINLINE>+</SCHEMEINLINE> and
	<SCHEMEINLINE>*</SCHEMEINLINE>.  Modify the open-coding compiler to consult
	the compile-time environment in order to compile the correct code for
	expressions involving the names of primitive
	<SPLITINLINE>
	  <SCHEME>procedures.</SCHEME>
	  <JAVASCRIPT>functions.</JAVASCRIPT>
	</SPLITINLINE>
	(The code will work correctly as long as the program does not
	<SPLITINLINE>
	  <SCHEME>
	    <SCHEMEINLINE>define</SCHEMEINLINE>
	  </SCHEME>
	  <JAVASCRIPT>
	    declare
	  </JAVASCRIPT>
	</SPLITINLINE>
	or
	<SPLITINLINE>
	  <SCHEME><SCHEMEINLINE>set!</SCHEMEINLINE></SCHEME>
	  <JAVASCRIPT>assign</JAVASCRIPT>
	</SPLITINLINE>
	these names.)
      </SCHEME>
      <JAVASCRIPT>
	We can apply the idea of the previous exercise to the technique of
	open-coding in exercise<SPACE/><REF NAME="ex:open-code"/>: For
	this, our compile time environment
	can store for many constants what kinds of values
	they will refer to at runtime. For example, if the expression on
	the right-hand side of the <JAVASCRIPTINLINE>=</JAVASCRIPTINLINE>
	sign in a constant declaration is a number literal, we know that
	occurrences of the name on the left-hand side within the scope of
	the declaration can only refer to a number at runtime.
	Similarly, we can identify at compile time names that will
	surely refer to a compound function object at runtime, and
	store this information in the compile-time environment.
	Use such an extended compile-time environment
	in the compilation of function applications in order to
	compile away the runtime distinction between primitive and
	compound functions whenever possible.
      </JAVASCRIPT>
    </SPLIT>
  </EXERCISE>
</SUBSECTION>
